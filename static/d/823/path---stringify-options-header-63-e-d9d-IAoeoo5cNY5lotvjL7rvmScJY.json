{"data":{"page":{"html":"<h1 id=\"option-header\"><a href=\"#option-header\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Option header</h1>\n<div class=\"toc\">\n<h2 id=\"table-of-contents\"><a href=\"#table-of-contents\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#toc\" aria-hidden class=\"anchor\"></a>Table of Contents</h2>\n<ul>\n<li><a href=\"#with-object-records\">With object records</a></li>\n<li><a href=\"#with-the-columns-option\">With the columns option</a></li>\n</ul>\n</div>\n<p>The <code class=\"language-text\">header</code> option generates the column names in the first emitted record. The value is expected to be a boolean value.</p>\n<p>This option implies that the knowledge of the columns. Column names can be discovered from the records when those are provided as object. They can also be provided through the <a href=\"/stringify/options/columns/\"><code class=\"language-text\">columns</code> option</a>.</p>\n<p>An error will be emitted at runtime if the <code class=\"language-text\">header</code> option is set because no columns are defined nor discovered in the first record. The error message is <code class=\"language-text\">Undiscoverable Columns: header option requires column option or object records</code>.</p>\n<h2 id=\"with-object-records\"><a href=\"#with-object-records\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>With object records</h2>\n<p>Columns names are automatically discovered from the first record if it is provided as a literal object. In such case, the keys present in the object are used to set the <a href=\"/stringify/options/columns/\"><code class=\"language-text\">columns</code> option</a>.</p>\n<p>To activate the generation of a header record, set the value to <code class=\"language-text\">true</code> as in the <a href=\"https://github.com/adaltas/node-csv-stringify/blob/master/samples/option.header.js\">header example</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> stringify <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'csv-stringify'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> assert <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'assert'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> year<span class=\"token punctuation\">:</span> <span class=\"token string\">'XXXX'</span><span class=\"token punctuation\">,</span> phone<span class=\"token punctuation\">:</span> <span class=\"token string\">'XXX XXXX'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> year<span class=\"token punctuation\">:</span> <span class=\"token string\">'YYYY'</span><span class=\"token punctuation\">,</span> phone<span class=\"token punctuation\">:</span> <span class=\"token string\">'YYY YYYY'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>\n  header<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  columns<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'year'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'phone'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  assert<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span>\n    data<span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"year,phone\\n\"</span> <span class=\"token operator\">+</span>\n    <span class=\"token string\">\"XXXX,XXX XXXX\\n\"</span> <span class=\"token operator\">+</span>\n    <span class=\"token string\">\"YYYY,YYY YYYY\\n\"</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Run this example with the command <code class=\"language-text\">node samples/option.header.js</code>.</p>\n<h2 id=\"with-the-columns-option\"><a href=\"#with-the-columns-option\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>With the columns option</h2>\n<p>The <code class=\"language-text\">columns</code> option may be used conjointly with the <code class=\"language-text\">header</code> option. </p>\n<p>The <a href=\"https://github.com/adaltas/node-csv-stringify/blob/master/samples/option.header_columns.js\">\"option.header_columns.js\" example</a> shows the behaviour when a record contains a field not declared as an option and when a column is not present in the records. If a record contains a field not declared as a columns, it will simply be discarded like with the <code class=\"language-text\">nocolumn</code> field below. If a column is declared but it is not present in a record, the header will contains the column name and the records will contains a field with an empty value for this column.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> stringify <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'csv-stringify'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> assert <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'assert'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> year<span class=\"token punctuation\">:</span> <span class=\"token string\">'XXXX'</span><span class=\"token punctuation\">,</span> phone<span class=\"token punctuation\">:</span> <span class=\"token string\">'XXX XXXX'</span><span class=\"token punctuation\">,</span> nocolumn<span class=\"token punctuation\">:</span> <span class=\"token string\">'XXX'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> year<span class=\"token punctuation\">:</span> <span class=\"token string\">'YYYY'</span><span class=\"token punctuation\">,</span> phone<span class=\"token punctuation\">:</span> <span class=\"token string\">'YYY YYYY'</span><span class=\"token punctuation\">,</span> nocolumn<span class=\"token punctuation\">:</span> <span class=\"token string\">'XXX'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>\n  header<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  columns<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'phone'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'year'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'nofield'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  assert<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span>\n    data<span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"phone,year,nofield\\n\"</span> <span class=\"token operator\">+</span>\n    <span class=\"token string\">\"XXX XXXX,XXXX,\\n\"</span> <span class=\"token operator\">+</span>\n    <span class=\"token string\">\"YYY YYYY,YYYY,\\n\"</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Run this example with the command <code class=\"language-text\">node samples/option.header_columns.js</code>.</p>","frontmatter":{"title":"Option header","description":"Display the column names on the first line if the columns option is provided or discovered","keywords":["csv","stringify","options","header"]},"fields":{"edit_url":"https://github.com/adaltas/node-csv-docs/edit/master/src/md/stringify/options/header.md","slug":"/stringify/options/header/"}}},"pageContext":{}}